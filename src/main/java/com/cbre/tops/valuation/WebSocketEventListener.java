package com.cbre.tops.valuation;

import java.io.IOException;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.messaging.Message;
import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.messaging.SessionConnectedEvent;
import org.springframework.web.socket.messaging.SessionDisconnectEvent;

@Component
public class WebSocketEventListener {

	private static final Logger logger = LoggerFactory.getLogger(WebSocketEventListener.class);

	@Autowired
	private SimpMessageSendingOperations messagingTemplate;

	@Autowired
	private JavaMailSender javaMailSender;

	@EventListener
	public void handleWebSocketConnectListener(SessionConnectedEvent event) {
		logger.info("Received a new web socket connection" + event);
	}

	@EventListener
	public void handleWebSocketDisconnectListener(SessionDisconnectEvent event) throws MessagingException, IOException {
		StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());

		String username = (String) headerAccessor.getSessionAttributes().get("username");
		String email = (String) headerAccessor.getSessionAttributes().get("useremail");
		if (username != null) {
			logger.info("User Disconnected : " + username);

			ChatMessage chatMessage = new ChatMessage();
			chatMessage.setType(ChatMessage.MessageType.LEAVE);
			chatMessage.setSender(username);
			System.out.println("email" + email);
			messagingTemplate.convertAndSend("/topic/public", chatMessage);
			if (isValid(email)) {
				sendEmailWithAttachment(email);
				ChatController.empty();
			}
			else
			{
				System.out.println("not a valid email");
			}
		}
	}

	void sendEmailWithAttachment(String email) {
		MimeMessage msg = javaMailSender.createMimeMessage();

		// true = multipart message
		MimeMessageHelper helper;
		try {
			helper = new MimeMessageHelper(msg, true);
			helper.setTo(email);

			helper.setSubject("Chat history from Jitu's ChatSystem");
			helper.setText("Please don't reply  to this mail,this is an autogenerated mail \n" + " Your Chat History is below "
					+ ChatController.fullmessage, true);
			// helper.setText("<h1>Check attachment for image!</h1>", true);

			helper.addAttachment("Happy Day.png", new ClassPathResource("smily.png"));

			javaMailSender.send(msg);
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			System.out.println("invalid address email");
		} catch (Exception Ex) {
			System.out.println("Exception Happened ");
		}

	}

	static boolean isValid(String email) {
		String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
		return email.matches(regex);
	}
}
